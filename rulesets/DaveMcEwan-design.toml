option.textwidth = 80
textrules.style_textwidth = true
textrules.style_semicolon = true
option.indent = 2
syntaxrules.tab_character = true
syntaxrules.style_indent = true
syntaxrules.multiline_if_begin = true
syntaxrules.multiline_for_begin = true
syntaxrules.style_trailingwhitespace = true
textrules.style_directives = true
syntaxrules.style_operator_arithmetic = true
syntaxrules.style_operator_boolean = true
syntaxrules.style_operator_integer = true
syntaxrules.style_operator_unary = true

syntaxrules.style_keyword_0or1space = true
syntaxrules.style_keyword_0space = true
syntaxrules.style_keyword_1or2space = true
syntaxrules.style_keyword_1space = true
syntaxrules.style_keyword_construct = true
syntaxrules.style_keyword_datatype = false # Overly restrictive.
syntaxrules.style_keyword_end = true
syntaxrules.style_keyword_maybelabel = true
syntaxrules.style_keyword_new = true
syntaxrules.style_keyword_newline = true
syntaxrules.style_commaleading = true
syntaxrules.eventlist_or = true
# Common to **ruleset-simsynth** (a subset of **ruleset-designintent**).
rules.blocking_assignment_in_always_ff = true
rules.blocking_assignment_in_always_latch = true
rules.non_blocking_assignment_in_always_comb = true
rules.case_default = true
rules.enum_with_type = true
rules.function_with_automatic = true
rules.keyword_forbidden_priority = true
rules.keyword_forbidden_unique = true
rules.keyword_forbidden_unique0 = true
rules.level_sensitive_always = true
rules.operator_case_equality = true

# Common to **ruleset-designintent**.
rules.action_block_with_side_effect = true
rules.default_nettype_none = true
rules.function_same_as_system_function = true
rules.keyword_forbidden_always = true
rules.keyword_forbidden_wire_reg = true
rules.non_ansi_module = true
rules.localparam_type_twostate = true
rules.parameter_type_twostate = true
rules.localparam_explicit_type = true
rules.parameter_explicit_type = true
rules.parameter_default_value = true
rules.parameter_in_generate = true
rules.parameter_in_package = true
rules.genvar_declaration_in_loop = true
rules.genvar_declaration_out_loop = false
rules.keyword_forbidden_generate = false
rules.keyword_required_generate = true
rules.explicit_case_default = true
rules.explicit_if_else = true
rules.loop_statement_in_always_comb = true
rules.loop_statement_in_always_ff = true
rules.loop_statement_in_always_latch = true
rules.sequential_block_in_always_comb = true
rules.sequential_block_in_always_ff = true
rules.sequential_block_in_always_latch = true
rules.multiline_for_begin = true
rules.multiline_if_begin = true
rules.inout_with_tri = true
rules.input_with_var = true
rules.output_with_var = true
rules.interface_port_with_modport = true
option.re_forbidden_checker = ".*"
rules.re_forbidden_checker = true
option.re_forbidden_class = ".*"
rules.re_forbidden_class = true
option.re_forbidden_port_ref = ".*"
rules.re_forbidden_port_ref = true
option.re_forbidden_property = ".*"
rules.re_forbidden_property = true
option.re_forbidden_sequence = ".*"
rules.re_forbidden_sequence = true
option.re_forbidden_task = ".*"
rules.re_forbidden_task = true
rules.lowercamelcase_package = true
rules.uppercamelcase_module = true
option.prefix_interface = "ifc_"
rules.prefix_interface = true
option.prefix_instance = "u_"
rules.prefix_instance = true
option.prefix_label = "l_"
rules.generate_case_with_label = true
rules.generate_for_with_label = true
rules.generate_if_with_label = true
option.prefix_inout = "b_"
rules.prefix_inout = true
option.prefix_input = "i_"
rules.prefix_input = true
option.prefix_output = "o_"
rules.prefix_output = true
option.re_required_port_interface = "^[a-z]+[a-zA-Z0-9_]*$"
rules.re_required_port_interface = true
option.re_required_function = "^([a-z]{1,1}[a-z0-9]{0,9}|f_[a-zA-Z0-9_]+)$"
rules.re_required_function = true
option.re_required_localparam = "^[A-Z]+[A-Z0-9_]*)$"
rules.re_required_localparam = true
option.re_required_parameter = "^[A-Z]+[A-Z0-9_]*)$"
rules.re_required_parameter = true
option.re_required_genvar = "^[a-z]{1,3}$"
rules.re_required_genvar = true
